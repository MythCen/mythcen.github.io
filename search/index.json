[{"content":"宏任务与微任务 在点击事件冒泡捕获的处理中，通过使用setTimeout 的方式，想要调整某个代码的执行顺序的话，其具体的执行顺序，由一套 机制 去实现，这套机制就是通过定义 宏任务与微任务 来安排执行顺序。\n异步机制：javascript事件循环 概念 内存堆：这是内存分配发生的地方。当V8引擎遇到变量声明和函数声明的时候，就把它们存储在堆里面。\n调用栈：这是你的代码执行时的地方。当引擎遇到像函数调用之类的可执行单元，就会把它们推入调用栈。\nJS单线程，指的是在JS引擎中，解析执行JS代码的调用栈是唯一的，所有的JS代码都在这一个调用栈里按照调用顺序执行，不能同时执行多个函数。\nWeb APIs：还有很多引擎之外的 API，我们把这些称为浏览器提供的 Web API，比如说 事件监听函数、DOM、HTTP／AJAX请求、setTimeout等等。\n回调队列（Event Queue)：按照先进先出的顺序存储所有的回调函数。在任意时间，只要Web API容器中的事件达到触发条件，就可以把回调函数添加到回调队列中去。\n**事件循环 ** (Event Loop)：持续的检测调用栈和回调队列，如果检测到调用栈为空，它就会通知回调队列把队列中的第一个回调函数推入执行栈。\n机制 JS运行时环境的工作机制：\n JS引擎：（唯一主线程）按顺序解析代码，遇到函数声明，入堆，遇到函数调用，入栈； 如果是同步函数调用，直接执行得到结果，同步函数弹出栈，继续下一个函数调用； 如果是异步函数调用，分发给Web API（多个辅助线程），进入Event Table并注册函数，异步函数弹出栈，继续下一个函数调用； Web API中，异步函数在相应辅助线程中处理完成后，即异步函数达到触发条件了，Event Table就将回调函数推入回调队列中。 Event Loop：不停地检查主线程的调用栈与回调队列，当调用栈空时，就把回调队列中的第一个任务推入栈中执行，不断循环。  例子 下面是一段简易的 ajax 请求代码：\nlet data = []; $.ajax({ url:www.javascript.com, data:data, success:() =\u0026gt; { console.log('发送成功!'); } }) console.log('代码执行结束');   ajax进入Event Table，注册回调函数 success 。\n  执行 console.log('代码执行结束') 。\n  ajax事件完成，回调函数 success 进入Event Queue。\n  主线程从Event Queue读取回调函数 success 并执行。\n  下面是一段更详细的例子：\nsetTimeout(function(){ console.log(\u0026#39;Hey, Why am I last?\u0026#39;) }, 0) function sayHi(){ console.log(\u0026#39;Hello\u0026#39;) } function sayBye(){ console.log(\u0026#39;Goodbye\u0026#39;) } sayHi() sayBye() 执行过程是这样的：\n JS引擎会检查整段代码的语法错误，如果没有错误，就从头开始深度解析 首先遇到setTimeout函数调用，把它推入执行栈顶 解析函数体，发现setTimeout函数是Web API的一种，因此就把它分发到Web API模块然后推出栈 因为定时器设置了0ms延迟，因此Web API模块立即把它的匿名回调函数推入到回调函数函数队列。事件循环检测执行栈是否是空闲，但是当前栈并不空闲，因为\u0026hellip; 当setTimeout函数一被分发到Web API模块，JS引擎发现了两个函数声明，把它们存储在堆内存里，然后遇到了sayHi函数的调用，就把它推入了栈顶 sayHi函数调用了console.log函数，因此console.log就被推入了栈顶 JS引擎开始解析console.log的函数体，它接收了一个消息去打印‘Hello’，然后被弹出栈 JS引擎返回到函数sayHi的执行，遇到函数的结束符号}之后，把sayHi弹出栈 sayHi函数一出栈，紧接着sayBye函数被调用，它就被推入栈顶，被解析，调用console.log，把console.log推入栈顶，打印一条消息，弹出栈。然后sayBye函数弹出栈 事件循环检测到执行栈终于空闲了，通知回调队列，然后回调队列把其中的匿名函数推入执行栈 匿名函数（就是setTimeout的回调函数）被解析，调用console.log，console.log推入栈顶 console.log执行完毕、再出栈 匿名函数再被推出栈，程序结束  另一个异步机制：宏任务与微任务 但是，JS异步还有一个机制，就是遇到宏任务，先处理宏任务——将宏任务放入Event Queue，然后再处理微任务——将微任务放入Event Queue。 注意，这里两个Event Queue不是同一个queue。 当js引擎的主线程执行栈为空时，它会优先从微任务queue里遍历注册的回调函数并一一执行，然后再从宏任务的queue里遍历执行注册的回调函数，如下图：\n  Web API中，异步函数在相应辅助线程中处理完成后，即异步函数达到触发条件了（比如setTimeout设置的10s后），如果异步函数是宏任务，则入宏任务消息队列，如果是微任务，则入微任务消息队列；\n  Event Loop不停地检查主线程的调用栈与回调队列，当调用栈空时，就把微任务消息队列中的第一个任务推入栈中执行，执行完成后，再取第二个微任务，直到微任务消息队列为空；然后 去宏任务消息队列中取第一个宏任务推入栈中执行，当该宏任务执行完成后，在下一个宏任务执行前，再依次取出微任务消息队列中的所有微任务入栈执行。\n  上述过程不断循环，每当微任务队列清空，可作为本轮事件循环的结束。\n宏任务 (macrotask/task)\n包括：\n I/O（例如点击一次button，上传一个文件，与程序产生交互的这些都可以称之为I/O） setTimeout setInterval setImmediate（仅Node） requestAnimationFrame（仅浏览器） xhr postMessage MessageChannel  对于 setInterval(fn,ms) 来说，不是每过 ms 秒会执行一次 fn ，而是每过 ms 秒，会有 fn 进入Event Queue。 一旦 setInterval 的回调函数 fn 执行时间超过了延迟时间 ms ，那么就完全看不出来有时间间隔了。\nP.S. 有些地方会列出来UI Rendering，说这个也是宏任务，可是在读了HTML规范文档以后，发现这很显然是和微任务平行的一个操作步骤\nP.S. requestAnimationFrame在MDN的定义为，下次页面重绘前所执行的操作，而重绘也是作为宏任务的一个步骤来存在的，且该步骤晚于微任务的执行\n微任务 (microtask/job)\n包括：\n Promise.then catch finally process.nextTick（仅Node） MutationObserver（仅浏览器）  P.S. new Promise在实例化的过程中所执行的代码都是同步进行的，而then中注册的回调才是异步执行的。 async/await底层是基于Promise封装的，所以await前面的代码相当于new Promise，是同步进行的，await后面的代码相当于then，才是异步进行的。\nP.S. 在Promise/A+的规范中，Promise的实现可以是微任务，也可以是宏任务，但是普遍的共识表示(至少Chrome是这么做的)，Promise应该是属于微任务阵营的*\n例子 setTimeout(_ =\u0026gt; console.log(4)) new Promise(resolve =\u0026gt; { resolve() console.log(1) }).then(_ =\u0026gt; { console.log(3) }) console.log(2) 最终输出结果为：1 \u0026gt; 2 \u0026gt; 3 \u0026gt; 4\n再来看一个嵌套的示例：\nPromise.resolve().then(()=\u0026gt;{ console.log(\u0026#39;Promise1\u0026#39;) Promise.resolve().then(()=\u0026gt;{ console.log(\u0026#39;Promise2\u0026#39;) }) }) setTimeout(()=\u0026gt;{ console.log(\u0026#39;setTimeout1\u0026#39;) setTimeout(()=\u0026gt;{ console.log(\u0026#39;setTimeout2\u0026#39;) },0) },0) 最后输出结果是Promise1 \u0026gt; setTimeout1 \u0026gt; Promise2 \u0026gt; setTimeout2\nPromise1\nNode 环境 Node中事件循环 Node用V8作为js的解析引擎，而I/O处理方面使用了自己设计的libuv，libuv是一个基于事件驱动的跨平台抽象层，封装了不同操作系统一些底层特性，对外提供统一的API，事件循环机制也是它里面的实现。 Node也是单线程，但是在处理Event Loop上与浏览器稍微有些不同。\n在node里，有一些常用的异步API，这里简单介绍下他们：\nsetImmediate() setImmediate()在一次Event Loop执行完毕后立刻调用。\nsetTimeout则是通过计算一个延迟时间后进行执行。\n所以如下示例，不能保证输出顺序。\nsetTimeout(_ =\u0026gt; console.log(\u0026#39;setTimeout\u0026#39;)) setImmediate(_ =\u0026gt; console.log(\u0026#39;setImmediate\u0026#39;)) 而如果是下面这样，则一定是setImmediate先输出。\nsetTimeout(_ =\u0026gt; console.log(\u0026#39;setTimeout\u0026#39;), 20) setImmediate(_ =\u0026gt; console.log(\u0026#39;setImmediate\u0026#39;)) process.nextTick() process.nextTick()会将回调函数放入队列中,在下一轮Tick时取出执行\n这是因为 ，process.nextTick()中的回调函数执行的优先级要高于setImmediate()。 Node里，事件循环对观察者的检查是有先后顺序的,process.nextTick()属于idle观察者, setImmediate()属于check观察者。\nprocess.nextTick和setImmediate的一个重要区别：多个process.nextTick语句总是在当前\u0026quot;执行栈\u0026quot;一次执行完，多个setImmediate可能则需要多次loop才能执行完。 事实上，这正是Node.js 10.0版添加setImmediate方法的原因，否则像下面这样的递归调用process.nextTick，将会没完没了，主线程根本不会去读取\u0026quot;事件队列\u0026quot;！\nprocess.nextTick(function foo() { process.nextTick(foo); }); 参考 https://juejin.im/post/5e972f3c518825739d40874a\nJS核心理论之《运行机制与宏任务、微任务》\nJS核心理论之《JS引擎、运行时与调用椎栈》\n","date":"2020-12-01T20:00:22+08:00","image":"http://mythcen.github.io/p/macrotask-and-microtask/cover_hu3395bef352bdebb2bcd19cd38ef3c08c_281145_120x120_fill_box_smart1_2.png","permalink":"http://mythcen.github.io/p/macrotask-and-microtask/","title":"宏任务与微任务"},{"content":"一个小小的个人空间在互联网上被开辟了。\n最开始是想要有一个总结技术经验，分享自己的编程思考的一个技术博客。\n由于使用过一段时间的Go，本着多了解下后端等其他开发链条的缘故，自己折腾了一个ghost系统，买了腾讯的服务器，最简化搭载nginx和nodeJs，在购买了域名以及备案之后，一个小破站出现了。\n中间折腾了不少，但是最终弄好后，遇到了一个问题——该版本的ghost编辑器会吞掉中文拼音。\n了解到这可能是ghost编辑器对中文的一个bug，虽然发现修改html 的lang属性为cn即可，但是想要修改源码，一是在自己不熟悉的服务器上，二是没有git管理，三是不熟悉ghost系统。再加上工作以及懒，博客的事情就被耽搁下来了，知道服务器一年期到，也没有更新什么文章。\n最后念着初心~~(折腾精神不够)~~，博文本身才是目标，因此选择了方便的静态博客+hugo，重新开始这段旅程。\n本站系技术分享 + 个人博客。\n也许它会成为一座孤岛。\n但它在我心中不会因为无人观赏而失色半分。\n与此同时，它欢迎所有从互联网里，跨洋而来的旅人。\n","date":"2020-11-29T11:05:49+08:00","image":"http://mythcen.github.io/p/start-record/island_huf5a5225bded95e869e8ea621151be2a1_146698_120x120_fill_q75_box_smart1.jpg","permalink":"http://mythcen.github.io/p/start-record/","title":"建站记"}]