[{"content":"首先，需要明确我们的目的——单元测试\n单元测试（Unit Tesing）是针对程序的最小部件，检查代码是否会按照预期工作的一种测试手段。在过程式编程中最小就是一个函数，在面向对象编程中最小部件就是对象方法。\n为什么选择 jest 单元测试的执行通常需要测试规范、断言、mock、覆盖率工具等支持，上述工具在繁荣的 Node.js 生态中有很多优秀实现，但组合起来使用会带来两个问题\n 多种工具的选择和学习有一定的成本 把多个工具组合成特定测试解决方案的配置复杂  而 Jest 是用来创建、执行和构建测试用例的 JavaScript 测试库，自身包含了 驱动、断言库、mock 、代码覆盖率等多种功能，配置使用相当简单\nApi 断言 jest提供了比较丰富的断言，此处介绍一些常用的。\n相等  toBe toEqual not  真值  toBeNull 只匹配 null toBeUndefined 只匹配 undefined toBeDefined 与 toBeUndefined 相反 toBeTruthy 匹配任何 if 语句为真 toBeFalsy 匹配任何 if 语句为假  数字  toBeCloseTo  包含  toContain  异步 callback 默认情况下，Jest 测试一旦执行到末尾就会完成。这意味着，像这样写不会有效果——\ntest(\u0026#39;the data is peanut butter\u0026#39;, () =\u0026gt; { function callback(data) { expect(data).toBe(\u0026#39;peanut butter\u0026#39;); } fetchData(callback); }); 一旦fetchData执行结束，此测试就在没有调用回调函数前结束.\n解决的方法之一，是使用jest提供的done函数，它会——【TODO】\ntest(\u0026#39;the data is peanut butter\u0026#39;, done =\u0026gt; { function callback(data) { try { expect(data).toBe(\u0026#39;peanut butter\u0026#39;); done(); } catch (error) { done(error); } } fetchData(callback); }); 若 done() 函数从未被调用，测试用例会如预期的那样执行失败（显示超时错误）。\n若 expect 执行失败，它会抛出一个错误，后面的 done() 不再执行。 而try被用来捕获这个错误。\npromise 使用promise的时候，需要注意返回该promise\ntest('the fetch fails with an error', () =\u0026gt; { expect.assertions(1); return fetchData().catch(e =\u0026gt; expect(e).toMatch('error')); }); 此处expect.assertions(2)用来确保异步代码里的断言被执行，从而捕获可能的错误。\n想更进一步的判断的话，可以使用.resolves / .rejects这两个api\ntest('the fetch fails with an error', () =\u0026gt; { return expect(fetchData()).rejects.toMatch('error'); }); 或者，可以在测试中使用 async 和 await。\ntest('the data is peanut butter', async () =\u0026gt; { await expect(fetchData()).resolves.toBe('peanut butter'); }); test('the fetch fails with an error', async () =\u0026gt; { await expect(fetchData()).rejects.toThrow('error'); }); 作用域  test.only ``beforeEach和afterEach` beforeAll 和 afterAll describe  jest通过 describe 块来将测试分组，在不同的组里可以指定不同的重复性工作，例如数据初始化、结束后执行的数据清理。\n// Applies to all tests in this file beforeEach(() =\u0026gt; { return initializeCityDatabase(); }); test(\u0026#39;city database has Vienna\u0026#39;, () =\u0026gt; { expect(isCity(\u0026#39;Vienna\u0026#39;)).toBeTruthy(); }); test(\u0026#39;city database has San Juan\u0026#39;, () =\u0026gt; { expect(isCity(\u0026#39;San Juan\u0026#39;)).toBeTruthy(); }); describe(\u0026#39;matching cities to foods\u0026#39;, () =\u0026gt; { // Applies only to tests in this describe block  beforeEach(() =\u0026gt; { return initializeFoodDatabase(); }); test(\u0026#39;Vienna \u0026lt;3 sausage\u0026#39;, () =\u0026gt; { expect(isValidCityFoodPair(\u0026#39;Vienna\u0026#39;, \u0026#39;Wiener Schnitzel\u0026#39;)).toBe(true); }); test(\u0026#39;San Juan \u0026lt;3 plantains\u0026#39;, () =\u0026gt; { expect(isValidCityFoodPair(\u0026#39;San Juan\u0026#39;, \u0026#39;Mofongo\u0026#39;)).toBe(true); }); }); Jest 会在所有真正的测试开始之前执行测试文件里所有的 describe 处理程序（handlers）\n当 describe 块运行完后,，默认情况下，Jest 会按照 test 出现的顺序依次运行所有测试,\nMock Mock函数  fn  使用 jest.fn() 就可以 mock 一个函数，mock 函数有 .mock 属性，标识函数被调用及返回值信息\n在某些情况下，除了指定返回值之外，完全替换模拟函数的实现是有用的\n .mock  所有的 mock 函数都有个特殊的 .mock属性，它保存了关于此函数如何被调用、调用时的返回值的信息。 .mock 属性还追踪每次调用时 this的值，\n这些 mock 成员变量在测试中非常有用，用于说明这些 function 是如何被调用、实例化或返回的：\n// The function was called exactly once expect(someMockFunction.mock.calls.length).toBe(1); // The first arg of the first call to the function was 'first arg' expect(someMockFunction.mock.calls[0][0]).toBe('first arg'); // The second arg of the first call to the function was 'second arg' expect(someMockFunction.mock.calls[0][1]).toBe('second arg'); // The return value of the first call to the function was 'return value' expect(someMockFunction.mock.results[0].value).toBe('return value'); // This function was instantiated exactly twice expect(someMockFunction.mock.instances.length).toBe(2); // The object returned by the first instantiation of this function // had a `name` property whose value was set to 'test' expect(someMockFunction.mock.instances[0].name).toEqual('test');  mockReturnValueOnce mockReturnValue  mock函数的返回值也是可以模拟的\nconst filterTestFn = jest.fn(); // Make the mock return `true` for the first call, // and `false` for the second call filterTestFn.mockReturnValueOnce(true).mockReturnValueOnce(false); const result = [11, 12].filter(num =\u0026gt; filterTestFn(num)); console.log(result); // \u0026gt; [11] console.log(filterTestFn.mock.calls); // \u0026gt; [ [11], [12] ] 大多数现实世界例子中，实际是在依赖的组件上配一个模拟函数并配置它，但手法是相同的。 在这些情况下，尽量避免在非真正想要进行测试的任何函数内实现逻辑。\nMock模块  mock  使用 jest.mock(模块名) 可以 mock 一个模块，比如某些功能依赖了 axios 发异步请求，在实际测试的时候我们希望直接返回既定结果，不用发请求，就可以 mock axios\nMock实现  mockImplementation  当需要定义从另一个模块创建的模拟函数的默认实现时，mockImplementation方法非常有用\nconst myMockFn = jest .fn() .mockImplementationOnce(cb =\u0026gt; cb(null, true)) .mockImplementationOnce(cb =\u0026gt; cb(null, false)); myMockFn((err, val) =\u0026gt; console.log(val)); // \u0026gt; true  myMockFn((err, val) =\u0026gt; console.log(val)); // \u0026gt; false Jest模拟实践 实际上，我们的单元测试环境并不会那么单纯，不同的环境需要加上不同的配置，甚至需要测试因为环境关联的特有功能。\nJest 与 TypeScript \u0026amp; Babel 要支持typescript \u0026amp; babel的环境，需要以下几个步骤\n安装依赖 $ npm i -D @babel/core @babel/preset-env @babel/preset-typescript @types/jest 添加babel配置\n// babel.config.js module.exports = { presets: [ [\u0026#39;@babel/preset-env\u0026#39;, { targets: { node: \u0026#39;current\u0026#39; } }], \u0026#39;@babel/preset-typescript\u0026#39;, ], }; Jest 与 React \u0026amp; enzyme Enzyme是用于React的JavaScript测试实用程序，可以更轻松地测试React组件的输出。还可以根据给定的输出进行操作，遍历并以某种方式模拟运行时。\n通过模仿jQuery的DOM操作和遍历的API，Enzyme的API意味着直观且灵活。\n安装依赖 $ npm i -S react react-dom $ npm i -D @babel/preset-env @babel/preset-react enzyme enzyme-adapter-react-16 其中，enzyme-adapter-react-16是与react对应的enzyme依赖（依赖详见官方文档）\n最后，需要手动配置一下对应的适配器\nimport Enzyme from \u0026#39;enzyme\u0026#39;; import Adapter from \u0026#39;enzyme-adapter-react-16\u0026#39;; Enzyme.configure({ adapter: new Adapter() }); enzyme本身是适配不同的测试框架的，如果想要使用带有自定义断言和更方便函数的enzyme，可以安装jest-enzyme\n配置 babel // babel.config.js module.exports = { presets: [ [\u0026#39;@babel/preset-env\u0026#39;, { targets: { node: \u0026#39;current\u0026#39; } }], \u0026#39;@babel/preset-react\u0026#39;, ], }; 使用class的写法还需——\n$ npm i -D @babel/plugin-proposal-class-properties 只用React Hook则不用\n使用 shallow\nShallow Rendering（浅渲染）指的是，将一个组件渲染成虚拟DOM对象，但是只渲染第一层，不渲染所有子组件，所以处理速度非常快。它不需要DOM环境，因为根本没有加载进DOM。\nmount\n测试用例 组件\nimport React, { useState } from \u0026#39;react\u0026#39;; export default function CheckboxWithLabel(props) { const [checkStatus, setCheckStatus] = useState(false); const { labelOn, labelOff } = props; function onChange() { setCheckStatus(!checkStatus); } return ( \u0026lt;label\u0026gt; \u0026lt;input type=\u0026#34;checkbox\u0026#34; checked={checkStatus} onChange={onChange} /\u0026gt; {checkStatus ? labelOn : labelOff} \u0026lt;/label\u0026gt; ); } 测试代码\nimport React from \u0026#39;react\u0026#39;; import Enzyme, { shallow } from \u0026#39;enzyme\u0026#39;; import Adapter from \u0026#39;enzyme-adapter-react-16\u0026#39;; import CheckboxWithLabel from \u0026#39;../src/checkbox-with-label\u0026#39;; beforeAll(() =\u0026gt; { // enzyme 初始化  Enzyme.configure({ adapter: new Adapter() }); }) test(\u0026#39;CheckboxWithLabel changes the text after click\u0026#39;, () =\u0026gt; { // 渲染组件  const checkbox = shallow(\u0026lt;CheckboxWithLabel labelOn=\u0026#34;On\u0026#34; labelOff=\u0026#34;Off\u0026#34; /\u0026gt;); expect(checkbox.text()).toEqual(\u0026#39;Off\u0026#39;); // 触发事件  checkbox.find(\u0026#39;input\u0026#39;).simulate(\u0026#39;change\u0026#39;); expect(checkbox.text()).toEqual(\u0026#39;On\u0026#39;); }); 注意 enzyme在React Hook 中有一些使用限制\n useEffect()和useLayoutEffect()不会在React浅渲染器中被调用 在React浅渲染器中，useCallback()不记忆回调  当然，也可以不使用\n###Jest 与 Webpack\nJest 可以使用 webpack 来管理资源、 样式和编译的项目。例如图像和字体。\n样式（CSS \u0026amp; CSS Module) 可以使用ES6 Proxy来模拟一个CSS Module：\n安装依赖 yarn add --dev identity-obj-proxy 然后在样式对象上，你的所有类别名称查找都会原样返回,例如styles.foobar === 'foobar'\n// package.json (for CSS Modules) { \u0026#34;jest\u0026#34;: { \u0026#34;moduleNameMapper\u0026#34;: { \u0026#34;\\\\.(jpg|jpeg|png|gif|eot|otf|webp|svg|ttf|woff|woff2|mp4|webm|wav|mp3|m4a|aac|oga)$\u0026#34;: \u0026#34;\u0026lt;rootDir\u0026gt;/__mocks__/fileMock.js\u0026#34;, \u0026#34;\\\\.(css|less)$\u0026#34;: \u0026#34;identity-obj-proxy\u0026#34; } } } 文件 详见Using with webpack · Jest\nJest 与 NextJs 【TODO】\n应用 库  react-test-renderer  路径问题 配置 jest.config.ts\n需要搭配 ts-node\n// jest.config.ts import type {Config} from \u0026#39;@jest/types\u0026#39;; // Sync object const config: Config.InitialOptions = { verbose: true, }; export default config; // Or async function export default async (): Promise\u0026lt;Config.InitialOptions\u0026gt; =\u0026gt; { return { verbose: true, }; }; Package.json\n{ \u0026#34;name\u0026#34;: \u0026#34;my-project\u0026#34;, \u0026#34;jest\u0026#34;: { \u0026#34;verbose\u0026#34;: true } } \u0026ndash;config \u0026lt;path/to/file.js|ts|cjs|mjs|json\u0026gt;\n{ \u0026quot;bail\u0026quot;: 1, \u0026quot;verbose\u0026quot;: true } Jest 会自动运行 sum.test.js 文件，其默认匹配规则\n 匹配 __test__ 文件夹下的 .js 文件（.jsx .ts .tsx 也可以） 匹配所有后缀为 .test.js 或 .spec.js 的文件（.jsx .ts .tsx 也可以）  可以通过根目录下的 jest.config.js 文件自定义测试文件匹配规则\n// jest.config.js  // 基本配置 // Sync object module.exports = { verbose: true, }; // Or async function module.exports = async () =\u0026gt; { return { verbose: true, }; }; //自定义匹配规则 module.exports = { testMatch: [ // glob 格式  \u0026#34;**/__tests__/**/*.[jt]s?(x)\u0026#34;, \u0026#34;**/?(*.)+(spec|test).[jt]s?(x)\u0026#34; ], // 正则表达式格式，与 testMatch 互斥，不能同时声明  // testRegex: \u0026#39;(/__tests__/.*|(\\\\.|/)(test|spec))\\\\.[jt]sx?$\u0026#39;, }; 指导思想 TDD BDD 测试原理  The more your tests resemble the way your software is used, the more confidence they can give you.\n React本身除了可以使用enzyme，也可以使用官方维护的React Testing Library，原因便是上面这一句。\nReact Testing Library 的测试将与实际的DOM节点一起使用，而不是处理呈现的React组件的实例，可能可以更加精确的贴近真实的使用状况。\n“Most of the damaging features have to do with encouraging testing implementation details. ”，而Enzyme提供了过于齐全的功能，在测试代码里可以访问到真实情况里不可能访问到的实例，可能会让使用者不慎写出错误的测试案例。\n参考   方凳雅集 使用 jest 单元测试\n  Test Utilities – React\n  【前端单元测试入门02】react的单元测试之Enzyme - osc_0i8c6s1z的个人空间 - OSCHINA - 中文开源技术交流社区\n  ","date":"2020-12-02T20:00:22+08:00","permalink":"http://mythcen.github.io/p/jest-unit-test/","title":"使用Jest 单元测试"},{"content":"在点击事件冒泡捕获的处理中，通过使用setTimeout 的方式，想要调整某个代码的执行顺序的话，其具体的执行顺序，由一套 机制 去实现，这套机制就是通过定义 宏任务与微任务 来安排执行顺序。\n异步机制：javascript事件循环 概念 内存堆：这是内存分配发生的地方。当V8引擎遇到变量声明和函数声明的时候，就把它们存储在堆里面。\n调用栈：这是你的代码执行时的地方。当引擎遇到像函数调用之类的可执行单元，就会把它们推入调用栈。\nJS单线程，指的是在JS引擎中，解析执行JS代码的调用栈是唯一的，所有的JS代码都在这一个调用栈里按照调用顺序执行，不能同时执行多个函数。\nWeb APIs：还有很多引擎之外的 API，我们把这些称为浏览器提供的 Web API，比如说 事件监听函数、DOM、HTTP／AJAX请求、setTimeout等等。\n回调队列（Event Queue)：按照先进先出的顺序存储所有的回调函数。在任意时间，只要Web API容器中的事件达到触发条件，就可以把回调函数添加到回调队列中去。\n**事件循环 ** (Event Loop)：持续的检测调用栈和回调队列，如果检测到调用栈为空，它就会通知回调队列把队列中的第一个回调函数推入执行栈。\n机制 JS运行时环境的工作机制：\n JS引擎：（唯一主线程）按顺序解析代码，遇到函数声明，入堆，遇到函数调用，入栈； 如果是同步函数调用，直接执行得到结果，同步函数弹出栈，继续下一个函数调用； 如果是异步函数调用，分发给Web API（多个辅助线程），进入Event Table并注册函数，异步函数弹出栈，继续下一个函数调用； Web API中，异步函数在相应辅助线程中处理完成后，即异步函数达到触发条件了，Event Table就将回调函数推入回调队列中。 Event Loop：不停地检查主线程的调用栈与回调队列，当调用栈空时，就把回调队列中的第一个任务推入栈中执行，不断循环。  例子 下面是一段简易的 ajax 请求代码：\nlet data = []; $.ajax({ url:www.javascript.com, data:data, success:() =\u0026gt; { console.log('发送成功!'); } }) console.log('代码执行结束');   ajax进入Event Table，注册回调函数 success 。\n  执行 console.log('代码执行结束') 。\n  ajax事件完成，回调函数 success 进入Event Queue。\n  主线程从Event Queue读取回调函数 success 并执行。\n  下面是一段更详细的例子：\nsetTimeout(function(){ console.log(\u0026#39;Hey, Why am I last?\u0026#39;) }, 0) function sayHi(){ console.log(\u0026#39;Hello\u0026#39;) } function sayBye(){ console.log(\u0026#39;Goodbye\u0026#39;) } sayHi() sayBye() 执行过程是这样的：\n JS引擎会检查整段代码的语法错误，如果没有错误，就从头开始深度解析 首先遇到setTimeout函数调用，把它推入执行栈顶 解析函数体，发现setTimeout函数是Web API的一种，因此就把它分发到Web API模块然后推出栈 因为定时器设置了0ms延迟，因此Web API模块立即把它的匿名回调函数推入到回调函数函数队列。事件循环检测执行栈是否是空闲，但是当前栈并不空闲，因为\u0026hellip; 当setTimeout函数一被分发到Web API模块，JS引擎发现了两个函数声明，把它们存储在堆内存里，然后遇到了sayHi函数的调用，就把它推入了栈顶 sayHi函数调用了console.log函数，因此console.log就被推入了栈顶 JS引擎开始解析console.log的函数体，它接收了一个消息去打印‘Hello’，然后被弹出栈 JS引擎返回到函数sayHi的执行，遇到函数的结束符号}之后，把sayHi弹出栈 sayHi函数一出栈，紧接着sayBye函数被调用，它就被推入栈顶，被解析，调用console.log，把console.log推入栈顶，打印一条消息，弹出栈。然后sayBye函数弹出栈 事件循环检测到执行栈终于空闲了，通知回调队列，然后回调队列把其中的匿名函数推入执行栈 匿名函数（就是setTimeout的回调函数）被解析，调用console.log，console.log推入栈顶 console.log执行完毕、再出栈 匿名函数再被推出栈，程序结束  另一个异步机制：宏任务与微任务 但是，JS异步还有一个机制，就是遇到宏任务，先处理宏任务——将宏任务放入Event Queue，然后再处理微任务——将微任务放入Event Queue。 注意，这里两个Event Queue不是同一个queue。 当js引擎的主线程执行栈为空时，它会优先从微任务queue里遍历注册的回调函数并一一执行，然后再从宏任务的queue里遍历执行注册的回调函数，如下图：\n  Web API中，异步函数在相应辅助线程中处理完成后，即异步函数达到触发条件了（比如setTimeout设置的10s后），如果异步函数是宏任务，则入宏任务消息队列，如果是微任务，则入微任务消息队列；\n  Event Loop不停地检查主线程的调用栈与回调队列，当调用栈空时，就把微任务消息队列中的第一个任务推入栈中执行，执行完成后，再取第二个微任务，直到微任务消息队列为空；然后 去宏任务消息队列中取第一个宏任务推入栈中执行，当该宏任务执行完成后，在下一个宏任务执行前，再依次取出微任务消息队列中的所有微任务入栈执行。\n  上述过程不断循环，每当微任务队列清空，可作为本轮事件循环的结束。\n宏任务 (macrotask/task)\n包括：\n I/O（例如点击一次button，上传一个文件，与程序产生交互的这些都可以称之为I/O） setTimeout setInterval setImmediate（仅Node） requestAnimationFrame（仅浏览器） xhr postMessage MessageChannel  对于 setInterval(fn,ms) 来说，不是每过 ms 秒会执行一次 fn ，而是每过 ms 秒，会有 fn 进入Event Queue。 一旦 setInterval 的回调函数 fn 执行时间超过了延迟时间 ms ，那么就完全看不出来有时间间隔了。\nP.S. 有些地方会列出来UI Rendering，说这个也是宏任务，可是在读了HTML规范文档以后，发现这很显然是和微任务平行的一个操作步骤\nP.S. requestAnimationFrame在MDN的定义为，下次页面重绘前所执行的操作，而重绘也是作为宏任务的一个步骤来存在的，且该步骤晚于微任务的执行\n微任务 (microtask/job)\n包括：\n Promise.then catch finally process.nextTick（仅Node） MutationObserver（仅浏览器）  P.S. new Promise在实例化的过程中所执行的代码都是同步进行的，而then中注册的回调才是异步执行的。 async/await底层是基于Promise封装的，所以await前面的代码相当于new Promise，是同步进行的，await后面的代码相当于then，才是异步进行的。\nP.S. 在Promise/A+的规范中，Promise的实现可以是微任务，也可以是宏任务，但是普遍的共识表示(至少Chrome是这么做的)，Promise应该是属于微任务阵营的*\n例子 setTimeout(_ =\u0026gt; console.log(4)) new Promise(resolve =\u0026gt; { resolve() console.log(1) }).then(_ =\u0026gt; { console.log(3) }) console.log(2) 最终输出结果为：1 \u0026gt; 2 \u0026gt; 3 \u0026gt; 4\n再来看一个嵌套的示例：\nPromise.resolve().then(()=\u0026gt;{ console.log(\u0026#39;Promise1\u0026#39;) Promise.resolve().then(()=\u0026gt;{ console.log(\u0026#39;Promise2\u0026#39;) }) }) setTimeout(()=\u0026gt;{ console.log(\u0026#39;setTimeout1\u0026#39;) setTimeout(()=\u0026gt;{ console.log(\u0026#39;setTimeout2\u0026#39;) },0) },0) 最后输出结果是Promise1 \u0026gt; setTimeout1 \u0026gt; Promise2 \u0026gt; setTimeout2\nPromise1\nNode 环境 Node中事件循环 Node用V8作为js的解析引擎，而I/O处理方面使用了自己设计的libuv，libuv是一个基于事件驱动的跨平台抽象层，封装了不同操作系统一些底层特性，对外提供统一的API，事件循环机制也是它里面的实现。 Node也是单线程，但是在处理Event Loop上与浏览器稍微有些不同。\n在node里，有一些常用的异步API，这里简单介绍下他们：\nsetImmediate() setImmediate()在一次Event Loop执行完毕后立刻调用。\nsetTimeout则是通过计算一个延迟时间后进行执行。\n所以如下示例，不能保证输出顺序。\nsetTimeout(_ =\u0026gt; console.log(\u0026#39;setTimeout\u0026#39;)) setImmediate(_ =\u0026gt; console.log(\u0026#39;setImmediate\u0026#39;)) 而如果是下面这样，则一定是setImmediate先输出。\nsetTimeout(_ =\u0026gt; console.log(\u0026#39;setTimeout\u0026#39;), 20) setImmediate(_ =\u0026gt; console.log(\u0026#39;setImmediate\u0026#39;)) process.nextTick() process.nextTick()会将回调函数放入队列中,在下一轮Tick时取出执行\n这是因为 ，process.nextTick()中的回调函数执行的优先级要高于setImmediate()。 Node里，事件循环对观察者的检查是有先后顺序的,process.nextTick()属于idle观察者, setImmediate()属于check观察者。\nprocess.nextTick和setImmediate的一个重要区别：多个process.nextTick语句总是在当前\u0026quot;执行栈\u0026quot;一次执行完，多个setImmediate可能则需要多次loop才能执行完。 事实上，这正是Node.js 10.0版添加setImmediate方法的原因，否则像下面这样的递归调用process.nextTick，将会没完没了，主线程根本不会去读取\u0026quot;事件队列\u0026quot;！\nprocess.nextTick(function foo() { process.nextTick(foo); }); 参考 https://juejin.im/post/5e972f3c518825739d40874a\nJS核心理论之《运行机制与宏任务、微任务》\nJS核心理论之《JS引擎、运行时与调用椎栈》\n","date":"2020-12-01T20:00:22+08:00","image":"http://mythcen.github.io/p/macrotask-and-microtask/cover_hu3395bef352bdebb2bcd19cd38ef3c08c_281145_120x120_fill_box_smart1_2.png","permalink":"http://mythcen.github.io/p/macrotask-and-microtask/","title":"宏任务与微任务"},{"content":"一个小小的个人空间在互联网上被开辟了。\n最开始是想要有一个总结技术经验，分享自己的编程思考的一个技术博客。\n由于使用过一段时间的Go，本着多了解下后端等其他开发链条的缘故，自己折腾了一个ghost系统，买了腾讯的服务器，最简化搭载nginx和nodeJs，在购买了域名以及备案之后，一个小破站出现了。\n中间折腾了不少，但是最终弄好后，遇到了一个问题——该版本的ghost编辑器会吞掉中文拼音。\n了解到这可能是ghost编辑器对中文的一个bug，虽然发现修改html 的lang属性为cn即可，但是想要修改源码，一是在自己不熟悉的服务器上，二是没有git管理，三是不熟悉ghost系统。再加上工作以及懒，博客的事情就被耽搁下来了，知道服务器一年期到，也没有更新什么文章。\n最后念着初心~~(折腾精神不够)~~，博文本身才是目标，因此选择了方便的静态博客+hugo，重新开始这段旅程。\n本站系技术分享 + 个人博客。\n也许它会成为一座孤岛。\n但它在我心中不会因为无人观赏而失色半分。\n与此同时，它欢迎所有从互联网里，跨洋而来的旅人。\n","date":"2020-11-29T11:05:49+08:00","image":"http://mythcen.github.io/p/start-record/island_huf5a5225bded95e869e8ea621151be2a1_146698_120x120_fill_q75_box_smart1.jpg","permalink":"http://mythcen.github.io/p/start-record/","title":"建站记"}]